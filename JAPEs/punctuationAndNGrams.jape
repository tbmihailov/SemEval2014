Imports: {
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import static gate.Utils.*;
}
Phase: Punctuation
Input: tweet
Options: control = appelt


Rule: PunctuationCounter
Priority: 100

(
 {tweet}
):tw
-->
:tw {
	// public void doit(inputAS, outputAS, doc, twAnnots ...)

	try{
		//Get content of the Tweet.
		Long start = twAnnots.firstNode().getOffset();
		Long end = twAnnots.lastNode().getOffset();
		
		
		//Add negation count
		AnnotationSet negation = inputAS.get("Negation",start(twAnnots), end(twAnnots));
		FeatureMap featureMap = twAnnots.iterator().next().getFeatures();
		
		int numNegation = 0;
		int numAllNegationTokens = 0;
		for(Annotation a : negation){
			if("negation".equals(a.getFeatures().get("rule"))){
				numNegation ++;
				numAllNegationTokens += (Integer) a.getFeatures().get("numNegationTokens");
			}
		}
		
		featureMap.put("numNegations", numNegation);
		featureMap.put("numAllNegationTokens", numAllNegationTokens);
		
		
		String text = "";
		try {
			text = doc.getContent().getContent(start, end).toString();
		} catch (gate.util.InvalidOffsetException e) {
			throw new java.lang.IndexOutOfBoundsException(e.toString());
		}
		
		
		//Remove whitespaces at the end of the text.
		text = text.replaceAll("\\s+$", "");
		
		
		//Remove all URLs from text BUT NOT FROM TOKENS! For Tokens look somewhere below.
		String urlPattern = "((https?|ftp|gopher|telnet|file|Unsure|http):((//)|(\\\\))+[\\w\\d:#@%/;$()~_?\\+-=\\\\\\.&]*)";
		Pattern p = Pattern.compile(urlPattern, Pattern.CASE_INSENSITIVE);
		Matcher m = p.matcher(text);
		int g = 0;
		while (m.find()) {
			text = text.replaceAll(m.group(g), "").trim();
			g++;
		}
		
		//The number of contiguous sequences of exclamation marks
		String regex = "!{2,}";
		
		Pattern pattern = Pattern.compile(regex);
		Matcher  matcher = pattern.matcher(text);

		int count = 0;
		while (matcher.find())
			count++;
		featureMap.put("CONT_SEQ_OF_EXCLAMATION_MARKS", count);
		
		//The number of contiguous sequences of question marks
		regex = "\\?{2,}";
		
		pattern = Pattern.compile(regex);
		matcher = pattern.matcher(text);

		count = 0;
		while (matcher.find())
			count++;
		featureMap.put("CONT_SEQ_OF_QUESTION_MARKS", count);
		
		
		
		//The number of contiguous sequences of both exclamation and question marks
		regex = "((!+\\?+(!|\\?)*)|(\\?+!+(!|\\?)*))";
		
		pattern = Pattern.compile(regex);
		matcher = pattern.matcher(text);

		count = 0;
		while (matcher.find())
			count++;
		featureMap.put("CONT_SEQ_OF_BOTH_EXCLAMATION_AND_QUESTION_MARKS", count);
		
		
		
		//The number of contiguous sequences of exclamation marks or question marks.
		regex = "(!|\\?){2,}";
		
		pattern = Pattern.compile(regex);
		matcher = pattern.matcher(text);

		count = 0;
		while (matcher.find())
			count++;
		featureMap.put("CONT_SEQ_OF_EXCLAMATION_OR_QUESTION_MARKS", count);
		
		
		
		//Whether the last token contains exclamation or question mark.
		regex = "^.*(!|\\?)$";
		
		pattern = Pattern.compile(regex);
		matcher = pattern.matcher(text);
		
		featureMap.put("LAST_TOKEN_ENDS_WITH_EXCLAMATION_OR_QUESTION_MARK", matcher.find() ? 1 : 0);
		
	} catch (Throwable e) {
		e.printStackTrace();
    }
}

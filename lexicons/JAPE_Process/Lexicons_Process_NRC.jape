Imports: { import static gate.Utils.*;}

Phase: LexiconsSum_NRC
Input: tweet
Options: control = appelt

Rule: LexiconsSum_NRC
({tweet}):tw
-->
:tw {

	//
	AnnotationSet lookups = inputAS.get("Lookup").getContained(start(twAnnots), end(twAnnots));
	FeatureMap featureMap = twAnnots.iterator().next().getFeatures();
	
	//common
	int pos=0;
	int neg=0;
	float sentiment=0;
	float ratio=0;
	
	//NRC hashtags lexicon UNI
	int nrcSen_uni_pos_sum = 0;
	int nrcSen_uni_neg_sum = 0;
	float nrcSen_uni_sent_sum = 0;
	float nrcSen_uni_ratio = 0;
	int nrcSen_uni_pos_max = 0;
	int nrcSen_uni_neg_max = 0;
	float nrcSen_uni_sent_max = 0;
	
	//NRC hashtags lexicon BIGRAM
	int nrcSen_bi_pos_sum = 0;
	int nrcSen_bi_neg_sum = 0;
	float nrcSen_bi_sent_sum = 0;
	float nrcSen_bi_ratio = 0;
	int nrcSen_bi_pos_max = 0;
	int nrcSen_bi_neg_max = 0;
	float nrcSen_bi_sent_max = 0;
	
	//NRC hashtags lexicon HASHTAGS
	int nrcSen_hash_pos_sum = 0;
	int nrcSen_hash_neg_sum = 0;
	float nrcSen_hash_sent_sum = 0;
	float nrcSen_hash_ratio = 0;
	int nrcSen_hash_pos_max = 0;
	int nrcSen_hash_neg_max = 0;
	float nrcSen_hash_sent_max = 0;
	
	for(Annotation a : lookups){
		FeatureMap aFeatMap = a.getFeatures();
		
		//NRC hashtags lexicon
		//unigrams
		if(("nrcSen".equals(aFeatMap.get("majorType")))
		&&("unigrams".equals(aFeatMap.get("minorType")))){
			//pos=Integer.parseInt(aFeatMap.get("p").toString());
			pos=aFeatMap.containsKey("p")?Integer.parseInt(aFeatMap.get("p").toString()):0;
			//neg=Integer.parseInt(aFeatMap.get("n").toString());
			neg=aFeatMap.containsKey("n")?Integer.parseInt(aFeatMap.get("n").toString()):0;
			//sentiment=Float.parseFloat(aFeatMap.get("s").toString());
			sentiment=aFeatMap.containsKey("s")?Float.parseFloat(aFeatMap.get("s").toString()):0;

			ratio=(pos+1)/(neg+1);
			
			nrcSen_uni_pos_sum+=pos;
			nrcSen_uni_neg_sum+=neg;
			nrcSen_uni_sent_sum+=sentiment;
			
			if(pos>nrcSen_uni_pos_max){
			  nrcSen_uni_pos_max = pos;
			}
			if(neg > nrcSen_uni_neg_max){
			  nrcSen_uni_neg_max = pos;
			}
			if(sentiment > nrcSen_uni_sent_max){
			  nrcSen_uni_sent_max = sentiment;
			}
		}else		
		//NRC hashtags lexicon
		//bigram
		if(("nrcSen".equals(aFeatMap.get("majorType")))
		&&("bigrams".equals(aFeatMap.get("minorType")))){
			pos=aFeatMap.containsKey("p")?Integer.parseInt(aFeatMap.get("p").toString()):0;
			neg=aFeatMap.containsKey("n")?Integer.parseInt(aFeatMap.get("n").toString()):0;
			sentiment=aFeatMap.containsKey("s")?Float.parseFloat(aFeatMap.get("s").toString()):0;
			ratio=(pos+1)/(neg+1);
			
			nrcSen_bi_pos_sum+=pos;
			nrcSen_bi_neg_sum+=neg;
			nrcSen_bi_sent_sum+=sentiment;
			
			if(pos > nrcSen_bi_pos_max){
				nrcSen_bi_pos_max = pos;
			}
			
			if(neg > nrcSen_bi_neg_max){
				nrcSen_bi_neg_max = neg;
			}
			
			if(sentiment > nrcSen_bi_sent_max){
				nrcSen_bi_sent_max = sentiment;
			}
			
		}else		
		//NRC hashtags lexicon
		//hashtags
		if(("nrcSen".equals(aFeatMap.get("majorType")))
		&&("hashtags".equals(aFeatMap.get("minorType")))){
			pos=aFeatMap.containsKey("p")?Integer.parseInt(aFeatMap.get("p").toString()):0;
			neg=aFeatMap.containsKey("n")?Integer.parseInt(aFeatMap.get("n").toString()):0;
			sentiment=aFeatMap.containsKey("s")?Float.parseFloat(aFeatMap.get("s").toString()):0;
			ratio=(pos+1)/(neg+1);
			
			nrcSen_hash_pos_sum+=pos;
			nrcSen_hash_neg_sum+=neg;
			nrcSen_hash_sent_sum+=sentiment;
			
			if(pos > nrcSen_hash_pos_max){
				nrcSen_hash_pos_max = pos;
			}
			
			if(neg > nrcSen_hash_neg_max){
				nrcSen_hash_neg_max = neg;
			}
			
			if(sentiment > nrcSen_hash_sent_max){
				nrcSen_hash_sent_max = sentiment;
			}
	
		}
	}
	
	//NRC hashtags lexicon UNI
	nrcSen_uni_ratio=(float)(nrcSen_uni_pos_sum+1)/(nrcSen_uni_neg_sum+1);
	
	featureMap.put("nrcSen_uni_pos_sum", nrcSen_uni_pos_sum);
	featureMap.put("nrcSen_uni_neg_sum", -nrcSen_uni_neg_sum);
	featureMap.put("nrcSen_uni_sent_sum", nrcSen_uni_sent_sum);
	featureMap.put("nrcSen_uni_posneg_sum", nrcSen_uni_pos_sum - nrcSen_uni_neg_sum);
	featureMap.put("nrcSen_uni_ratio", nrcSen_uni_ratio);
	featureMap.put("nrcSen_uni_pos_max", nrcSen_uni_pos_max);
	featureMap.put("nrcSen_uni_neg_max", -nrcSen_uni_neg_max);
	featureMap.put("nrcSen_uni_sent_sum", nrcSen_uni_sent_sum);

	
	//NRC hashtags lexicon BI
	nrcSen_bi_ratio=(float)(nrcSen_bi_pos_sum+1)/(nrcSen_bi_neg_sum+1);
	
	featureMap.put("nrcSen_bi_pos_sum", nrcSen_bi_pos_sum);
	featureMap.put("nrcSen_bi_neg_sum", -nrcSen_bi_neg_sum);
	featureMap.put("nrcSen_bi_sent_sum", nrcSen_bi_sent_sum);
	featureMap.put("nrcSen_bi_posneg_sum", nrcSen_bi_pos_sum - nrcSen_bi_neg_sum);
	featureMap.put("nrcSen_bi_ratio", nrcSen_bi_ratio);
	featureMap.put("nrcSen_bi_pos_max", nrcSen_bi_pos_max);
	featureMap.put("nrcSen_bi_neg_max", -nrcSen_bi_neg_max);
	featureMap.put("nrcSen_bi_sent_max", nrcSen_bi_sent_max);

	
	//NRC hashtags lexicon HASHTAGS
	nrcSen_hash_ratio=(float)(nrcSen_hash_pos_sum+1)/(nrcSen_hash_neg_sum+1);
	
	featureMap.put("nrcSen_hash_pos_sum", nrcSen_hash_pos_sum);
	featureMap.put("nrcSen_hash_neg_sum", -nrcSen_hash_neg_sum);
	featureMap.put("nrcSen_hash_sent_sum", nrcSen_hash_sent_sum);
	featureMap.put("nrcSen_hash_posneg_sum", nrcSen_hash_pos_sum - nrcSen_hash_neg_sum);
	featureMap.put("nrcSen_hash_ratio", nrcSen_hash_ratio);
	featureMap.put("nrcSen_hash_pos_max", nrcSen_hash_pos_max);
	featureMap.put("nrcSen_hash_neg_max", -nrcSen_hash_neg_max);
	featureMap.put("nrcSen_hash_sent_max", nrcSen_hash_sent_max);
}
